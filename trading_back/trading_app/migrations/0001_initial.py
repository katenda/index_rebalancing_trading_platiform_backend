# Generated by Django 5.2.7 on 2025-10-16 20:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text="User's account balance", max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('name', models.CharField(help_text="User's full name", max_length=100)),
                ('email', models.EmailField(help_text="User's email address", max_length=254, unique=True)),
                ('userid', models.CharField(help_text='Unique user identifier', max_length=50, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'trading_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('buy', 'Buy Stock'), ('sell', 'Sell Stock'), ('dividend', 'Dividend'), ('fee', 'Fee')], help_text='Type of transaction', max_length=20)),
                ('debit', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount debited from account', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('credit', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount credited to account', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('description', models.TextField(help_text='Transaction description', max_length=500)),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Transaction date and time')),
                ('balance_after', models.DecimalField(decimal_places=2, help_text='Account balance after this transaction', max_digits=15)),
                ('user', models.ForeignKey(help_text='User who made the transaction', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'trading_transaction',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock', models.CharField(help_text='Stock symbol (e.g., AAPL, GOOGL)', max_length=10)),
                ('quantity', models.PositiveIntegerField(help_text='Number of shares held')),
                ('buying_price', models.DecimalField(decimal_places=2, help_text='Price per share when purchased', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('current_price', models.DecimalField(decimal_places=2, help_text='Current market price per share', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('date_purchased', models.DateTimeField(auto_now_add=True, help_text='Date when stock was purchased')),
                ('user', models.ForeignKey(help_text='User who owns the holding', on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Holding',
                'verbose_name_plural': 'Holdings',
                'db_table': 'trading_holding',
                'ordering': ['-date_purchased'],
                'unique_together': {('user', 'stock')},
            },
        ),
    ]
